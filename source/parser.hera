# WIP Coffee-like lang

# Goal: A successor to CoffeeScript, much more 1-to-1 with es6
# https://262.ecma-international.org/13.0/
# Goal: TypeScript support too?

Program
  Init __ TopLevelStatement* __

TopLevelStatement
  EOS? _? ModuleItem StatementDelimiter

Expression
  # CommaOperator
  # https://262.ecma-international.org/#sec-comma-operator
  Applied (__ "," __ Applied)*

# Function application:
# a b
# a(b)
# a b, c, d
# a(b, c, d)
Applied
  Operated Application?

# ?? https://262.ecma-international.org/#prod-CallExpression
Application
  !EOS __ Arguments
  # Space then argument list
  ApplicationStart ArgumentList InsertCloseParen
  # TODO: nested argument list?

# Start of function application, inserts an open parenthesis, maintains spacing and comments when possible
ApplicationStart
  $_+:spacing ->
    return "(" + spacing.replace(/^ /, "")

# https://262.ecma-international.org/#prod-Arguments
Arguments
  "(" ( ArgumentList / __ ) ( "," __ )? ")"

# https://262.ecma-international.org/#prod-ArgumentList
ArgumentList
  Expression CommaExpression*

CommaExpression
  __ "," __ Expression

Operated
  AssignmentExpression (__ BinaryOp __ AssignmentExpression)*
  UnaryOp* AssignmentExpression

# https://262.ecma-international.org/#prod-AssignmentExpression
AssignmentExpression
  # TODO: Allow for newlines after assignment op
  (Accessed __ AssignmentOp _*)+ Expression
  Accessed

Accessed
  PrimaryExpression Access*

Access
  # TODO: can use reserved words here
  "?"? "." Identifier
  "?"? "[" Expression "]"

# https://262.ecma-international.org/#prod-PrimaryExpression
PrimaryExpression
  This
  Literal
  ArrayLiteral
  ObjectLiteral
  FunctionExpression
  "(" __ Expression __ ")"

  Identifier

This
  "this"
  "@"

# https://262.ecma-international.org/#prod-FormalParameters
# The parameters in a function definition
Parameters
  "(" __ Identifier (Comma Identifier)* __ ")"
  "(" __ ")"
  "" -> "()"

# https://262.ecma-international.org/#prod-BindingRestElement
BindingRestElement
  "..." __ ( BindingIdentifier / BindingPattern )

BindingIdentifier
  Identifier

# https://262.ecma-international.org/#prod-BindingPattern
BindingPattern
  ObjectBindingPattern
  ArrayBindingPattern

# https://262.ecma-international.org/#prod-ObjectBindingPattern
ObjectBindingPattern
  "{" ( __ BindingRestProperty )? __ "}"

ArrayBindingPattern
  "[" __ "]"

# https://262.ecma-international.org/#prod-BindingRestProperty
BindingRestProperty
  "..." __ BindingIdentifier

FunctionExpression
  Parameters __ "->" FunctionBody -> ["function", $1, $4]
  "function" __ Parameters FunctionBody

FunctionBody
  __ "{" EOS NestedBlockExpressions "}"
  InsertOpenBrace EOS NestedBlockExpressions InsertNewline InsertIndent InsertCloseBrace
  # One liner
  InsertOpenBrace !EOS __ Statement InsertSpace InsertCloseBrace

NestedBlockExpressions
  PushIndent BlockExpression*:exps PopIndent ->
    if (!exps.length) return $skip
    return exps

BlockExpression
  $Nested Statement StatementDelimiter

Literal
  StringLiteral
  NumericLiteral
  "true"
  "false"
  "null"
  "undefined"

Comma
  _* "," _*

Identifier
  !ReservedWord /(?:\p{ID_Start}|[_$])(?:\p{ID_Continue}|[$])*/

IdentifierName
  Identifier

# https://262.ecma-international.org/#prod-IdentifierReference
IdentifierReference
  Identifier

# https://262.ecma-international.org/#prod-ArrayLiteral
ArrayLiteral
  "[" ElementList __ "]"

# https://262.ecma-international.org/#prod-ElementList
# NOTE: Modified and simplified from the spec
ElementList
  ArrayElementExpression ( __ "," __ ArrayElementExpression )*

# NOTE: Modified and simplified from the spec
ArrayElementExpression
  (("..." __ )? AssignmentExpression)?

# https://262.ecma-international.org/#prod-ObjectLiteral
# NOTE: Slightly simplified from spec
ObjectLiteral
  "{" __ PropertyDefinitionList __ ("," __)? "}"
  "{" __ "}"
  InsertOpenBrace &EOS NestedPropertyDefinitions InsertNewline InsertIndent InsertCloseBrace

NestedPropertyDefinitions
  PushIndent NestedPropertyDefinition*:defs PopIndent ->
    if(!defs.length) return $skip
    return defs

NestedPropertyDefinition
  # TODO: This may be a little weird/ambiguous with single identifier shorthand
  $Nested PropertyDefinition NestedPropertyDelimiter

NestedPropertyDelimiter
  &EOS -> ","

PropertyDefinitionList
  PropertyDefinition (__ "," __ PropertyDefinition)*

PropertyDefinition
  # NOTE: CoverInitializedName early error doesn't seem necessary with this parser
  # NOTE: checking for "inline" assignment first before consuming EOS (thereby preventing find nested objects)
  PropertyName __ ":" ( ( _* AssignmentExpression ) / ( __ AssignmentExpression ) )
  MethodDefinition
  "..." __ AssignmentExpression
  # NOTE: this needs to be at the bottom to prevent shadowing PropertyName
  IdentifierReference

PropertyName
  # https://262.ecma-international.org/#prod-LiteralPropertyName
  NumericLiteral
  StringLiteral
  IdentifierName
  # https://262.ecma-international.org/#prod-ComputedPropertyName
  "[" __ AssignmentExpression __ "]"

# https://262.ecma-international.org/#prod-MethodDefinition
MethodDefinition
  "get" __ ClassElementName __ Parameters FunctionBody
  # NOTE: Not adding extra validation using PropertySetParameterList yet. TODO?
  "set" __ ClassElementName __ Parameters FunctionBody
  AsyncGeneratorMethod
  AsyncMethod
  GeneratorMethod
  ClassElementName __ Parameters FunctionBody

ClassElementName
  PropertyName
  PrivateIdentifier

PrivateIdentifier
  "#" __ IdentifierName

# https://262.ecma-international.org/#prod-GeneratorMethod
GeneratorMethod
  # NOTE: not currently using GeneratorBody
  "*" __ ClassElementName __ Parameters FunctionBody

# https://262.ecma-international.org/#prod-AsyncMethod
AsyncMethod
  # NOTE: not currently using AsyncFunctionBody
  "async" !EOS __ ClassElementName __ Parameters FunctionBody

AsyncGeneratorMethod
  # NOTE: not currently using AsyncGeneratorBody
  "async" !EOS __ "*" __ ClassElementName __ Parameters FunctionBody

# https://262.ecma-international.org/#prod-AssignmentOperator
AssignmentOp
  "**="
  "*="
  "/="
  "%="
  "+="
  "-="
  "<<="
  ">>>="
  ">>="
  "&&="
  "&="
  "^="
  "||="
  "|="
  "??="
  "="

BinaryOp
  "**"
  "*"
  "/"
  "%"
  "+"
  "-"
  "<="
  ">="
  "<<"
  "<"
  ">>>"
  ">>"
  ">"
  "!=="
  "!="
  "==="
  "=="
  "and" -> "&&"
  "&&"
  "or" -> "||"
  "||"
  "??"
  "instanceof"
  "in"
  "&"
  "^"
  "|"

# TODO: delete, void, typeof
UnaryOp
  [!~+-]

# https://262.ecma-international.org/#prod-Statement
Statement
  KeywordStatement
  Expression

# https://262.ecma-international.org/#prod-ModuleItem
ModuleItem
  ImportDeclaration
  ExportDeclaration
  Statement

KeywordStatement
  # https://262.ecma-international.org/#prod-BreakStatement
  "break"

  # https://262.ecma-international.org/#sec-debugger-statement
  "debugger"

  # https://262.ecma-international.org/#prod-ReturnStatement
  "return" __ Expression
  "return"

# TODO: Actual import grammar
ImportDeclaration
  /import[^\r\n]*/

# TODO: Actual export grammar
ExportDeclaration
  /export[^\r\n]*/

# TODO: Try/Catch
# TODO: Switch

# https://262.ecma-international.org/#prod-NumericLiteral
NumericLiteral
  BigIntegerLiteral
  HexLiteral
  DecimalLiteral
  # TODO: Non-decimal literal or add note about difference from spec

BigIntegerLiteral
  /(?:0|[1-9](?:_[0-9]|[0-9])*)n/
  # /[_0-9]*n/

DecimalLiteral
  /\d+(?:\.\d*)?/

# https://262.ecma-international.org/#prod-HexIntegerLiteral
HexLiteral
  /0[xX][0-9a-fA-F](?:[0-9a-fA-F]|_[0-9a-fA-F])*/

# https://262.ecma-international.org/#prod-StringLiteral
StringLiteral
  "\"" $DoubleStringCharacter* "\""
  "\'" $SingleStringCharacter* "\'"

DoubleStringCharacter
  [^"\\]+
  EscapeSequence

SingleStringCharacter
  [^'\\]+
  EscapeSequence

EscapeSequence
  $( "\\" . )

# https://262.ecma-international.org/#sec-comments
ReservedWord
  /(?:await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|if|import|in|instanceof|new|null|return|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)(?!\p{ID_Continue})/

# https://262.ecma-international.org/#sec-comments
Comment
  MultiLineComment
  SingleLineComment

SingleLineComment
  /\/\/[^\r\n]*/

MultiLineComment
  "/*" (!"*/" . )* "*/"

# Non-newline "white space" (includes comments)
_
  ([\t ]+ / Comment)+

# Optional whitespace including newlines and comments
__
  ([\s]+ / Comment)*

StatementDelimiter
  __ ";"
  # Implied semicolon
  &EOS -> ";"

EOS
  $(_* EOL)+

# End of line
EOL
  /\r\n|\n|\r|$/

# End of file
EOF
  /$/

# Insertions

InsertOpenParen
  "" -> "("

InsertCloseParen
  "" -> ")"

InsertOpenBrace
# NOTE: Includes a preceding space
  "" -> " {"

InsertCloseBrace
  "" -> "}"

InsertNewline
  "" ->
    return "\n"

InsertIndent
  "" ->
    return "".padStart(global.currentIndent * 2)

InsertSpace
  "" -> " "

# Indentation

Init
  "" ->
    global.currentIndent = 0
    global.indentLevels = [0]
    global.verbose = false

Indent
  ( "  " / "\t" )* ->
    return $1.length

PushIndent
  "" ->
    global.currentIndent++
    if (global.verbose) {
      console.log("pushing indent", global.currentIndent)
    }
    global.indentLevels.push(global.currentIndent)

    return global.currentIndent

PopIndent
  "" ->
    if (global.verbose) {
      console.log("popping indent", global.indentLevels[global.indentLevels.length-1], "->", global.indentLevels[global.indentLevels.length-2])
    }
    global.indentLevels.pop()
    global.currentIndent = global.indentLevels[global.indentLevels.length-1]

    return global.currentIndent

Nested
  EOS? Indent:indent ->
    const currentIndent = global.indentLevels[global.indentLevels.length-1]
    if (global.verbose) {
      console.log("global indent", global.currentIndent)
      console.log("Indented", indent, currentIndent)
    }
    if (indent !== currentIndent) {
      if (global.verbose) {
        console.log("skipped nested")
      }
      return $skip
    }
    return indent
