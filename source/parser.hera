# WIP Coffee-like lang

# Goal: A successor to CoffeeScript, much more 1-to-1 with es6
# https://262.ecma-international.org/13.0/
# Goal: TypeScript support too?

Program
  Init TopLevelStatement*

TopLevelStatement
  EOL? Content StatementDelimiter

Import
  "import"

Export
  "export"

Content
  Statement
  Expression

Expression
  Applied

# Function application:
# a b
# a(b)
# a b, c, d
# a(b, c, d)
Applied
  Operated Application?

Application
  "()"
  __ "(" ArgumentList ")"
  # Space then argument list
  ApplicationStart ArgumentList InsertCloseParen

# Start of function application, inserts an open parenthesis, maintains spacing and comments when possible
ApplicationStart
  $_+:spacing ->
    return "(" + spacing.replace(/^ /, "")

ArgumentList
  Expression CommaExpression*

CommaExpression
  __ "," __ Expression

Operated
  Assigned (__ BinaryOp __ Assigned)*
  UnaryOp* Assigned

Assigned
  (Accessed __ "=" __)+ Expression
  Accessed

Accessed
  Primary Access*

Access
  "?"? "." Name
  "?"? "[" Expression "]"

Primary
  Function
  "(" Expression ")"
  Literal
  Name

This
  "this"
  "@"

Parameters
  "(" __ Name (Comma Name)+ ")"
  "(" __ Name __ ")"
  "(" __ ")"
  "" -> "()"

Function
  Parameters __ "->" FunctionBody -> ["function", $1, $4]
  "function" __ Parameters FunctionBody

FunctionBody
  InsertOpenBrace $EOS BlockExpressions InsertNewline InsertIndent InsertCloseBrace

BlockExpressions
  PushIndent BlockExpression*:exps PopIndent ->
    if (!exps.length) return $skip
    return exps

BlockExpression
  $Nested Expression StatementDelimiter

Literal
  StringValue
  Numeric
  "true"
  "false"
  "null"
  "undefined"

Comma
  _* "," _*

Name
  [$a-zA-Z_][$a-zA-Z0-9_]*

# https://262.ecma-international.org/#prod-AssignmentOperator
AssignmentOp
  "**="
  "*="
  "/="
  "%="
  "+="
  "-="
  "<<="
  ">>>="
  ">>="
  "&="
  "^="
  "|="

BinaryOp
  "**"
  "*"
  "/"
  "%"
  "+"
  "-"
  "<="
  ">="
  "<<"
  "<"
  ">>>"
  ">>"
  ">"
  "!=="
  "!="
  "==="
  "=="
  "and" -> "&&"
  "&&"
  "or" -> "||"
  "||"
  "??"
  "instanceof"
  "in"
  "&"
  "^"
  "|"

# TODO: delete, void, typeof
UnaryOp
  [!~+-]

Statement
  Import
  Export

# TODO: Actual import grammar
Import
  /import[^\r\n]*/

# TODO: Actual export grammar
Export
  /export[^\r\n]*/

Numeric
  BigIntegerLiteral
  HexLiteral
  DecimalLiteral

BigIntegerLiteral
  /(?:0|[1-9](?:_[0-9]|[0-9])*)n/
  # /[_0-9]*n/

DecimalLiteral
  /\d+(?:\.\d*)?/

# https://262.ecma-international.org/13.0/#prod-HexIntegerLiteral
HexLiteral
  /0[xX][0-9a-fA-F](?:[0-9a-fA-F]|_[0-9a-fA-F])*/

StringValue
  "\"" $DoubleStringCharacter* "\""
  "\'" $SingleStringCharacter* "\'"

DoubleStringCharacter
  [^"\\]+
  EscapeSequence

SingleStringCharacter
  [^'\\]+
  EscapeSequence

EscapeSequence
  $( "\\" . )

# https://262.ecma-international.org/13.0/#sec-comments
ReservedWord
  /await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|if|import|in|instanceof|new|null|return|super|switch|this|throw|true|try|typeof|var|void|while|with|yield/

# https://262.ecma-international.org/13.0/#sec-comments
Comment
  MultiLineComment
  SingleLineComment

SingleLineComment
  /\/\/[^\r\n]*/

MultiLineComment
  "/*" (!"*/" . )* "*/"

# Non-newline "white space" (includes comments)
_
  ([\t ] / Comment)

# Optional whitespace including newlines
__
  /\s*/

StatementDelimiter
  _* ";"
  # Implied semicolon
  _* &EOL -> [";", $1]

EOS
  $(_* EOL)+

# End of line
EOL
  /\r\n|\n|\r|$/

# End of file
EOF
  /$/

# Insertions

InsertOpenParen
  "" -> "("

InsertCloseParen
  "" -> ")"

InsertOpenBrace
# NOTE: Includes a preceding space
  "" -> " {"

InsertCloseBrace
  "" -> "}"

InsertNewline
  "" ->
    return "\n"

InsertIndent
  "" ->
    return "".padStart(global.currentIndent * 2)

# Indentation

Init
  "" ->
    global.currentIndent = 0
    global.indentLevels = [0]
    global.verbose = false

Indent
  ( "  " / "\t" )* ->
    return $1.length

PushIndent
  "" ->
    global.currentIndent++
    if (global.verbose) {
      console.log("pushing indent", global.currentIndent)
    }
    global.indentLevels.push(global.currentIndent)

    return global.currentIndent

PopIndent
  "" ->
    if (global.verbose) {
      console.log("popping indent", global.indentLevels[global.indentLevels.length-1], "->", global.indentLevels[global.indentLevels.length-2])
    }
    global.indentLevels.pop()
    global.currentIndent = global.indentLevels[global.indentLevels.length-1]

    return global.currentIndent

Nested
  EOS? Indent:indent ->
    const currentIndent = global.indentLevels[global.indentLevels.length-1]
    if (global.verbose) {
      console.log("global indent", global.currentIndent)
      console.log("Indented", indent, currentIndent)
    }
    if (indent !== currentIndent) {
      if (global.verbose) {
        console.log("skipped nested")
      }
      return $skip
    }
    return indent
