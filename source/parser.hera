# WIP Coffee-like lang

# Goal: A successor to CoffeeScript, much more 1-to-1 with es6
# https://262.ecma-international.org/13.0/
# Goal: TypeScript support too?

Program
  Init __ TopLevelStatement* __

TopLevelStatement
  EOS? _? ModuleItem StatementDelimiter

# https://262.ecma-international.org/#prod-Expression
Expression
  # CommaOperator
  # https://262.ecma-international.org/#sec-comma-operator
  # NOTE: Eliminated left recursion
  AssignmentExpression (__ "," AssignmentExpression)*

# https://262.ecma-international.org/#prod-Arguments
Arguments
  "(" ArgumentList? ( __ "," )? __ ")"

# https://262.ecma-international.org/#prod-ArgumentList
ArgumentList
  # NOTE: Added nested arguments on separate new lines
  &EOS NestedArgumentList
  __ Expression CommaExpression*

NestedArgumentList
  PushIndent NestedArgument*:args PopIndent ->
    if (args.length) return args
    return $skip

NestedArgument
  Nested Expression ParameterElementDelimiter

CommaExpression
  __ "," __ Expression

BinaryOpExpression
  UnaryExpression (__ BinaryOp __ UnaryExpression)*

# https://262.ecma-international.org/#prod-UnaryExpression
UnaryExpression
  # NOTE: Eliminated left recursion
  UnaryOp*:pre UpdateExpression:exp UnaryPostfix?:post ->
    // Handle "?" postfix
    if (post === "?") {
      // v1.1 Can remove parens when unnecessary once exp returns a full AST node to determine if they are actually needed
      return ["(", pre, , "(", exp, ") != null)"]
    }

    return [pre, exp, post]

UnaryPostfix
  "?"
  __ "as" NonIdContinue Type

# https://262.ecma-international.org/#prod-UpdateExpression
UpdateExpression
  # NOTE: Not allowing whitespace betwen prefix and postfix increment operators and operand
  ("++" / "--") UnaryExpression
  LeftHandSideExpression ("++" / "--")?

# https://262.ecma-international.org/#prod-AssignmentExpression
AssignmentExpression
  # NOTE: Try to match a single line assignment expression before matching newline then assignment expression
  TrailingComment* AssignmentExpressionRest
  __ AssignmentExpressionRest

AssignmentExpressionRest
  YieldExpression
  ("async" __)? ArrowFunction

  # NOTE: Eliminated left recursion
  # NOTE: Consolidated assignment ops

  (__ LeftHandSideExpression __ AssignmentOp)+ Expression
  ConditionalExpression

YieldExpression
  "yield" ( TrailingComment* "*" )? AssignmentExpression

# https://262.ecma-international.org/#prod-ArrowFunction
ArrowFunction
  ThinArrowFunction
  Parameters ReturnTypeSuffix? FatArrow ConciseBody

FatArrow
  # Ensures at least one space before arrow
  __:ws "=>" ->
    if (!ws.length)
      return " =>"
    return $0

# https://262.ecma-international.org/#prod-ConciseBody
ConciseBody
  EOS SingleNestedBlockStatement
  !(_* "{") AssignmentExpression
  BracedBlock

# https://262.ecma-international.org/#prod-ConditionalExpression
ConditionalExpression
  ShortCircuitExpression ( __ "?" AssignmentExpression __ ":" AssignmentExpression)?

# https://262.ecma-international.org/#prod-ShortCircuitExpression
ShortCircuitExpression
  # NOTE: We don't need to track the precedence of all the binary operators so they all collapse into this
  BinaryOpExpression

# https://262.ecma-international.org/#prod-PrimaryExpression
PrimaryExpression
  This
  IdentifierReference
  Literal
  ArrayLiteral
  ObjectLiteral
  FunctionExpression
  ClassExpression
  RegularExpressionLiteral
  TemplateLiteral
  # https://262.ecma-international.org/#prod-ParenthesizedExpression
  # NOTE: Currently ignoring early error checking in https://262.ecma-international.org/#prod-CoverParenthesizedExpressionAndArrowParameterList
  "(" __ Expression __ ")"
  # https://facebook.github.io/jsx/#sec-jsx-PrimaryExpression
  JSXElement
  JSXFragment

# https://262.ecma-international.org/#prod-ClassDeclaration
ClassDeclaration
  # NOTE: skipping syntax directed operation for now
  ClassExpression

# https://262.ecma-international.org/#prod-ClassExpression
ClassExpression
  "class" ( __ BindingIdentifier )? ( __ ClassHeritage )? ClassBody

# https://262.ecma-international.org/#prod-ClassHeritage
ClassHeritage
  # ExtendsToken __ LeftHandSideExpression
  # NOTE: This is a subset of member expression that doesn't have spaced function application
  # TODO: there are some other LeftHandSideExpressions that are valid here but aren't yet supported (new, super, import expression)
  ExtendsToken __ MemberExpression

ExtendsToken
  # NOTE: Added "<" extends shorthand
  "<" -> "extends"
  "extends"

# https://262.ecma-international.org/#prod-ClassBody
# NOTE: Nesting and indentation sensitive
ClassBody
  __ "{" (EOS NestedClassElements)? __ "}"
  InsertOpenBrace EOS NestedClassElements InsertNewline InsertIndent InsertCloseBrace

NestedClassElements
  PushIndent NestedClassElement*:elements PopIndent ->
    if (!elements.length) return $skip
    return elements

NestedClassElement
  Nested ClassElement StatementDelimiter

# https://262.ecma-international.org/#prod-ClassElement
ClassElement
  # ClassStaticBlock
  "static" BracedBlock
  # NOTE: Combined optional static and Method/Field definition
  ("static" __)? ( MethodDefinition / FieldDefinition )

# https://262.ecma-international.org/#prod-FieldDefinition
FieldDefinition
  ClassElementName TypeSuffix? Initializer?

This
  "this"
  # NOTE: Added @identifier shorthand, also works for private identifiers
  "@" ( "#"? IdentifierName ):ref -> ["this.", ref]
  # NOTE: Added '@' as a 'this' shorthand
  "@" -> "this"

# https://262.ecma-international.org/#prod-LeftHandSideExpression
LeftHandSideExpression
  NewExpression
  CallExpression
  # NOTE: OptionalExpression is merged into CallExpression

# https://262.ecma-international.org/#prod-NewExpression
NewExpression
  # NOTE: Eliminated left recursion
  # NOTE: Changed to CallExpression to handle arguments
  ("new" __)+ CallExpression

# https://262.ecma-international.org/#prod-CallExpression
CallExpression
  "super" __ Arguments
  "import" __ "(" AssignmentExpression __ ")"
  MemberExpression CallExpressionRest*

CallExpressionRest
  # NOTE: Added shorthand x?(3) -> x?.(3)
  OptionalShorthand? Arguments
  MemberExpressionRest
  SpacedApplication
  TemplateLiteral

OptionalShorthand
  ("?" ( "." / InsertDot ))

SpacedApplication
  # Spaced function application
  # Function application:
  # a b => a(b)
  # a b, c, d => a(b, c, d)
  # x y z => x(y(z))
  ApplicationStart ArgumentList InsertCloseParen (&EOS Nested CallExpressionRest)*

# Start of function application, inserts an open parenthesis, maintains spacing and comments when possible
ApplicationStart
  OptionalShorthand?:opt $_+:spacing !AdditionalReservedWords ->
    return [opt, "(", spacing.replace(/^ /, "")]

# Reserved words that will prevent spaced function application
# ie: the 'of' in 'for x of ...'
AdditionalReservedWords
  /(of)(?!\p{ID_Continue})/

# https://262.ecma-international.org/#prod-MemberExpression
MemberExpression
  # NOTE: "new" MemberExpression Arguments seems to be handled fine by other rules already
  # NOTE: Eliminated left recursion
  PrimaryExpression MemberExpressionRest*
  TrailingComment* SuperProperty
  TrailingComment* MetaProperty

MemberExpressionRest
  # NOTE: Added shorthand x?[3] -> x?.[3]
  OptionalShorthand? "[" __ Expression __ "]"
  # NOTE: Combined Optional and Property access
  # TODO: this doesn't yet work for arbitrarily deep nesting, only the first level
  (EOS NestedFurther)? PropertyAccess
  # NOTE: Added CoffeeScript :: prototype shorthand
  "::" IdentifierName?:id ->
    if (id)
      return [".prototype.", id]
    return ".prototype"

PropertyAccess
  "?"? "." (IdentifierName / PrivateIdentifier)

SuperProperty
  "super[" __ Expression __ "]"

MetaProperty
  "new.target"
  "import.meta"

# https://262.ecma-international.org/#prod-FormalParameters
# The parameters in a function definition
Parameters
  # NOTE: BindingElement -> ParameterElement
  # TODO: Rest parameter
  "(" ParameterElement* __ ")"
  "" -> "()"

# NOTE: Similar to BindingElement but appears in formal parameters list
ParameterElement
  # NOTE: Merged in SingleNameBinding
  __ (BindingIdentifier / BindingPattern) TypeSuffix? Initializer? ParameterElementDelimiter

ParameterElementDelimiter
  _* ","
   # NOTE: Don't insert comma before inline closing paren
  &( _* ")" )
  # NOTE: Do insert comma before closing paren on following line
  &( __ ")" ) -> ","
  &EOS -> ","

# https://262.ecma-international.org/#prod-BindingIdentifier
BindingIdentifier
  Identifier

# https://262.ecma-international.org/#prod-BindingPattern
BindingPattern
  ObjectBindingPattern
  ArrayBindingPattern

# https://262.ecma-international.org/#prod-ObjectBindingPattern
# NOTE: Simplified from spec
ObjectBindingPattern
  "{" BindingProperty* ( __ BindingRestProperty )? __ "}"

# https://262.ecma-international.org/#prod-ArrayBindingPattern
# NOTE: Simplified from spec
ArrayBindingPattern
  "[" (BindingElement / Elision)* ( __ BindingRestElement )? __ "]"

# https://262.ecma-international.org/#prod-BindingProperty
BindingProperty
  __ PropertyName __ ":" __ (BindingIdentifier / BindingPattern) Initializer? ObjectPropertyDelimiter
  __ BindingIdentifier Initializer? ObjectPropertyDelimiter

# https://262.ecma-international.org/#prod-BindingRestProperty
BindingRestProperty
  "..." __ BindingIdentifier

# https://262.ecma-international.org/#prod-BindingElement
BindingElement
  # NOTE: Merged in SingleNameBinding
  __ (BindingIdentifier / BindingPattern) Initializer? ArrayElementDelimiter

# https://262.ecma-international.org/#prod-BindingRestElement
BindingRestElement
  "..." __ ( BindingIdentifier / BindingPattern )

# https://262.ecma-international.org/#prod-FunctionDeclaration
FunctionDeclaration
  FunctionExpression

# https://262.ecma-international.org/#prod-FunctionExpression
FunctionExpression
  # NOTE: Added CoffeeScript thin arrow function shorthand
  ThinArrowFunction
  # NOTE: Merged in async and generator with optionals
  ( "async" __ )? "function" ( "*" __ )? ( __ BindingIdentifier )? __ Parameters ReturnTypeSuffix? BracedBlock

ThinArrowFunction
  Parameters:params ReturnTypeSuffix?:suffix __ "->" BracedBlock:block -> ["function", params, suffix, block]

# NOTE: This is the body of if/else/for etc.
Block
  __ "{" EOS NestedBlockExpressions __ "}"
  # NOTE: Added indentation based implied braces
  InsertOpenBrace EOS NestedBlockExpressions InsertNewline InsertIndent InsertCloseBrace
  Statement
  __ Statement

# This is a block that must include braces (function body, try/catch/finally)
BracedBlock
  __ "{" EOS NestedBlockExpressions __ "}"
  # NOTE: Added indentation based implied braces
  InsertOpenBrace EOS NestedBlockExpressions InsertNewline InsertIndent InsertCloseBrace
  # One liner
  InsertOpenBrace !EOS __ Statement InsertSpace InsertCloseBrace

SingleNestedExpression
  # NOTE: Don't insert a statement delimiter for single nested expression
  # NOTE: this whole back half is mainly to guarantee we call PopIndent exactly once whether we've matched or not
  PushIndent (Nested Expression StatementDelimiter)?:exp ( (!(Nested Expression) PopIndent) / PopIndent ) ->
    if (exp) return exp
    return $skip

SingleNestedBlockStatement
  # NOTE: Don't insert a statement delimiter for single nested expression
  # NOTE: this whole back half is mainly to guarantee we call PopIndent exactly once whether we've matched or not
  PushIndent (Nested StatementListItem)?:exp ( (!( Nested StatementListItem ) / PopIndent ) / PopIndent ) ->
    if (exp) return exp
    return $skip

NestedBlockExpressions
  PushIndent BlockExpression*:exps PopIndent ->
    if (!exps.length) return $skip
    return exps

BlockExpression
  Nested StatementListItem StatementDelimiter

Literal
  StringLiteral
  NumericLiteral
  "true"
  "false"
  "null"
  "undefined"

Comma
  _* "," _*

# https://262.ecma-international.org/#prod-Identifier
Identifier
  !ReservedWord IdentifierName

# https://262.ecma-international.org/#prod-IdentifierName
IdentifierName
  /(?:\p{ID_Start}|[_$])(?:\p{ID_Continue}|[\u200C\u200D$])*/ ->
    return {
      $loc: $loc,
      token: $0,
    }

# https://262.ecma-international.org/#prod-IdentifierReference
IdentifierReference
  Identifier

# https://262.ecma-international.org/#prod-ArrayLiteral
ArrayLiteral
  "[" NestedElementList __ "]"
  "[" ElementList __ "]"

NestedElementList
  PushIndent NestedElement*:elements PopIndent ->
    if (elements.length)
      return elements
    return $skip

NestedElement
  Nested InlineElementList ArrayElementDelimiter

ArrayElementDelimiter
  _* ","
  &( _* "]" ) # NOTE: Don't insert comma before inline closing bracket
  &( __ "]" ) -> ","
  &EOS -> ","

# https://262.ecma-international.org/#prod-ElementList
# NOTE: Modified and simplified from the spec
ElementList
  ArrayElementExpression ( __ "," __ ArrayElementExpression )*

InlineElementList
  ArrayElementExpression ( _* "," _* ArrayElementExpression )*

# NOTE: Modified and simplified from the spec
ArrayElementExpression
  (("..." __ )? AssignmentExpression)?

# https://262.ecma-international.org/#prod-Elision
Elision
  # NOTE: The repetition must be handled from outside rather than using left recursion here
  __ ","

# https://262.ecma-international.org/#prod-ObjectLiteral
# NOTE: Slightly simplified from spec
ObjectLiteral
  "{" &EOS NestedPropertyDefinitions __ "}"
  "{" __ PropertyDefinitionList __ ("," __)? "}"
  "{" __ "}"
  InsertOpenBrace &EOS NestedPropertyDefinitions InsertNewline InsertIndent InsertCloseBrace

NestedPropertyDefinitions
  PushIndent NestedPropertyDefinition*:defs PopIndent ->
    if(!defs.length) return $skip
    return defs

NestedPropertyDefinition
  # TODO: This may be a little weird/ambiguous with single identifier shorthand
  Nested PropertyDefinition ObjectPropertyDelimiter

ObjectPropertyDelimiter
  _* ","
  &( _* "}" ) # NOTE: Don't insert comma before inline closing bracket
  # NOTE: Ensures trailing commas
  &( __ "}" ) -> ","
  &EOS -> ","

PropertyDefinitionList
  PropertyDefinition (__ "," __ PropertyDefinition)*

# https://262.ecma-international.org/#prod-PropertyDefinition
PropertyDefinition
  # NOTE: CoverInitializedName early error doesn't seem necessary with this parser
  PropertyName __ ":" AssignmentExpression
  MethodDefinition
  "..." AssignmentExpression
  # NOTE: this needs to be at the bottom to prevent shadowing PropertyName
  IdentifierReference

PropertyName
  # https://262.ecma-international.org/#prod-LiteralPropertyName
  NumericLiteral
  StringLiteral
  IdentifierName
  # https://262.ecma-international.org/#prod-ComputedPropertyName
  "[" AssignmentExpression __ "]"

# https://262.ecma-international.org/#prod-MethodDefinition
MethodDefinition
  # TODO: Make compatible with CoffeeScript style comments by being more precise with __ whitespace here
  "get" NonIdContinue TrailingComment* ClassElementName __ Parameters BracedBlock
  # NOTE: Not adding extra validation using PropertySetParameterList yet. TODO?
  "set" NonIdContinue TrailingComment* ClassElementName __ Parameters BracedBlock
  AsyncGeneratorMethod
  AsyncMethod
  GeneratorMethod
  ClassElementName _* Parameters BracedBlock

ClassElementName
  PropertyName
  PrivateIdentifier

PrivateIdentifier
  "#" IdentifierName

# https://262.ecma-international.org/#prod-GeneratorDeclaration
# https://262.ecma-international.org/#prod-GeneratorExpression
# NOTE: Merged GeneratorExpression and GeneratorDeclaration into FunctionExpression

# https://262.ecma-international.org/#prod-GeneratorMethod
GeneratorMethod
  # NOTE: not currently using GeneratorBody
  "*" __ ClassElementName __ Parameters GeneratorBody

# https://262.ecma-international.org/#prod-GeneratorBody
GeneratorBody
  BracedBlock

# https://262.ecma-international.org/#prod-AsyncFunctionDeclaration
# https://262.ecma-international.org/#prod-AsyncFunctionExpression
# NOTE: Merged into FunctionExpression

# https://262.ecma-international.org/#prod-AsyncMethod
AsyncMethod
  "async" !EOS __ ClassElementName __ Parameters AsyncFunctionBody

# https://262.ecma-international.org/#prod-AsyncFunctionBody
AsyncFunctionBody
  BracedBlock

# https://262.ecma-international.org/#prod-AsyncGeneratorDeclaration
# https://262.ecma-international.org/#prod-AsyncGeneratorExpression
# NOTE: Merged into FunctionExpression

# https://262.ecma-international.org/#prod-AsyncGeneratorMethod
AsyncGeneratorMethod
  "async" !EOS __ "*" __ ClassElementName __ Parameters AsyncGeneratorBody

# https://262.ecma-international.org/#prod-AsyncGeneratorBody
AsyncGeneratorBody
  BracedBlock

# https://262.ecma-international.org/#prod-AssignmentOperator
AssignmentOp
  "**="
  "*="
  "/="
  "%="
  "+="
  "-="
  "<<="
  ">>>="
  ">>="
  "&&="
  "&="
  "^="
  "||="
  "|="
  "??="
  "="

BinaryOp
  "**"
  "*"
  "/"
  "%"
  "+"
  "-"
  "<="
  ">="
  "<<"
  "<"
  ">>>"
  ">>"
  ">"
  "!=="
  # NOTE: CoffeeScript converts "!=" -> "!=="
  # Convert if CoffeeScript compat flag is set
  "!=" ->
    if(global.coffeeCompat) return "!=="
    return $1
  "is" NonIdContinue -> "==="
  "==="
  # NOTE: CoffeeScript converts "==" -> "==="
  # Convert if CoffeeScript compat flag is set
  "==" ->
    if(global.coffeeCompat) return "==="
    return $1
  "and" NonIdContinue -> "&&"
  "&&"
  "or" NonIdContinue -> "||"
  "||"
  "??"
  "instanceof" NonIdContinue
  "in" NonIdContinue
  "&"
  "^"
  "|"

UnaryOp
  [!~+-]
  ( "delete" / "void" / "typeof" ) NonIdContinue __

# https://262.ecma-international.org/#prod-ModuleItem
ModuleItem
  ImportDeclaration
  ExportDeclaration
  StatementListItem

# https://262.ecma-international.org/#prod-StatementListItem
StatementListItem
  # NOTE: Added postfix conditionals
  (Declaration / Statement):statement PostfixConditional?:cond ->
    if (cond)
      return [cond, statement, "}"]
    return $0

PostfixConditional
  TrailingComment*:ws ("if" / "unless"):cond NonIdContinue Expression:exp ->
    if (cond === "if")
      return [ws, "if(", exp, ") {"]
    return [ws, "if(!(", exp, ")) {"]

# https://262.ecma-international.org/#prod-Statement
Statement
  KeywordStatement
  BlockStatement
  VariableStatement
  IfStatement
  IterationStatement
  SwitchStatement
  TryStatement

  EmptyStatement
  ExpressionStatement

  # NOTE: no WithStatement
  # NOTE: no LabelledStatement

# NOTE: EmptyStatement handled differently than spec, consuming inline whitespace and comments then asserting following semi-colon
EmptyStatement
  TrailingComment* &";"

# https://262.ecma-international.org/#prod-BlockStatement
BlockStatement
  __ "{" EOS NestedBlockExpressions __ "}"

IfStatement
  # NOTE: Added paren-less condition
  "if" Condition Block ( __ "else" Block )?
  "unless" Condition:condition Block:block ->
    return ["if", condition.map((c) => {
      if (c === "(") return "(!("
      if (c === ")") return "))"
      return c
    }), block]

# https://262.ecma-international.org/#prod-IterationStatement
IterationStatement
  # NOTE: Added from CoffeeScript
  LoopStatement
  DoWhileStatement
  WhileStatement
  ForStatement
  ForInOfStatement

# NOTE: Added from CoffeeScript
LoopStatement
  "loop" NonIdContinue Block:b ->
    return ["while(true)", b]

# https://262.ecma-international.org/#prod-DoWhileStatement
DoWhileStatement
  # NOTE: Condition provides optional parens
  "do" NonIdContinue Block __ WhileClause

# https://262.ecma-international.org/#prod-WhileStatement
WhileStatement
  # NOTE: Condition provides optional parens
  WhileClause Block

WhileClause
  ( "while" / "until" ):kind NonIdContinue Condition:cond ->
    if (kind === "until") {
      cond[1] = "(!("
      cond[5] = "))"
      return ["while", cond]
    }
    return $0

# https://262.ecma-international.org/#prod-ForStatement
ForStatement
  "for" NonIdContinue __ "(" __ ( LexicalDeclaration / VariableStatement / Expression? ) __ ";" __ Expression? ";" __ Expression? ")" Block

# https://262.ecma-international.org/#prod-ForInOfStatement
ForInOfStatement
  # NOTE: Consolidated declarations
  "for" NonIdContinue __ "(" __          ( ( "var" __ ForBinding ) / ForDeclaration / LeftHandSideExpression ) __ "in" __ Expression __ ")"           Block
  # NOTE: Added optional parens
  "for" NonIdContinue __ InsertOpenParen ( ( "var" __ ForBinding ) / ForDeclaration / LeftHandSideExpression ) __ "in" __ Expression InsertCloseParen Block
  # NOTE: Consolidated optional "await" and declarations
  "for" NonIdContinue ( __ "await" )? __ "(" __          ( ( "var" __ ForBinding ) / ForDeclaration / LeftHandSideExpression ) __ "of" AssignmentExpression __ ")"           Block
  # NOTE: Added optional parens
  "for" NonIdContinue ( __ "await" )? __ InsertOpenParen ( ( "var" __ ForBinding ) / ForDeclaration / LeftHandSideExpression ) __ "of" AssignmentExpression InsertCloseParen Block

# https://262.ecma-international.org/#prod-ForDeclaration
ForDeclaration
  ("let" / "const") NonIdContinue __ ForBinding

# https://262.ecma-international.org/#prod-ForBinding
ForBinding
  BindingIdentifier
  BindingPattern

# https://262.ecma-international.org/#prod-SwitchStatement
SwitchStatement
  "switch" NonIdContinue Condition CaseBlock

# https://262.ecma-international.org/#prod-CaseBlock
CaseBlock
  __ "{" &EOS NestedCaseClauses __ "}"
  # NOTE: Added optional braces with nesting
  &EOS InsertOpenBrace NestedCaseClauses InsertNewline InsertCloseBrace

NestedCaseClauses
  PushIndent NestedCaseClause*:clauses PopIndent ->
    if (clauses.length) return clauses
    return $skip

NestedCaseClause
  Nested CaseClause

# https://262.ecma-international.org/#prod-CaseClause
CaseClause
  # TODO: Multiple expressions
  "case" NonIdContinue _* Expression ImpliedColon NestedBlockExpressions
  # TODO: Multiple expressions
  # NOTE: Added "when" from CoffeeScript. `when` always breaks.
  When _* Expression ImpliedColon NestedBlockExpressions InsertBreak
  # NOTE: Merged in default clause
  "default" NonIdContinue ImpliedColon NestedBlockExpressions

When
  "when" NonIdContinue -> "case"

ImpliedColon
  __ ":"
  "" -> ":"

# https://262.ecma-international.org/#prod-TryStatement
TryStatement
  "try" BracedBlock Catch?:c Finally?:f ->
    if (!c && !f) {
      return [$1, $2, " catch {}"]
    }

    return [$1, $2, c, f]

# https://262.ecma-international.org/#prod-Catch
Catch
  __ "catch" CatchBind? BracedBlock

# NOTE: Added optional parentheses to catch binding
CatchBind
  __ "(" __ CatchParameter __ ")"
  __ InsertOpenParen CatchParameter InsertCloseParen

# https://262.ecma-international.org/#prod-Finally
Finally
  __ "finally" BracedBlock

# https://262.ecma-international.org/#prod-CatchParameter
CatchParameter
  BindingIdentifier
  BindingPattern

Condition
  __ "(" __ Expression __ ")"
  !EOS __ InsertOpenParen Expression InsertCloseParen

# https://262.ecma-international.org/#prod-ExpressionStatement
ExpressionStatement
  # NOTE: semi-colons are being handled elsewhere
  # NOTE: Shouldn't need negative lookahead if shadowed in the proper order
  Expression

KeywordStatement
  # https://262.ecma-international.org/#prod-BreakStatement
  # NOTE: no label
  "break" NonIdContinue

  # https://262.ecma-international.org/#prod-ContinueStatement
  # NOTE: no label
  "continue" NonIdContinue

  # https://262.ecma-international.org/#sec-debugger-statement
  "debugger" NonIdContinue

  # https://262.ecma-international.org/#prod-ReturnStatement
  Return MaybeNestedExpression?

  # https://262.ecma-international.org/#prod-ThrowStatement
  "throw" NonIdContinue Expression

MaybeNestedExpression
  !EOS TrailingComment* Expression
  &EOS ObjectLiteral

Return
  "return" NonIdContinue

# https://262.ecma-international.org/#prod-ImportDeclaration
ImportDeclaration
  "import type" NonIdContinue __ ImportClause __ FromClause -> { ts: true, children: $0 }
  "import" NonIdContinue __ ImportClause __ FromClause
  "import" NonIdContinue __ ModuleSpecifier

# https://262.ecma-international.org/#prod-ImportClause
ImportClause
  ImportedBinding ( __ "," __ ( NameSpaceImport / NamedImports ) )?
  NameSpaceImport
  NamedImports

# https://262.ecma-international.org/#prod-NameSpaceImport
NameSpaceImport
  "*" __ "as" NonIdContinue __ ImportedBinding

# https://262.ecma-international.org/#prod-NamedImports
NamedImports
  "{" ImportSpecifier* ( __ "," )? __ "}"

# https://262.ecma-international.org/#prod-FromClause
FromClause
  "from" NonIdContinue __ ModuleSpecifier

# https://262.ecma-international.org/#prod-ImportSpecifier
ImportSpecifier
  __ ModuleExportName __ "as" NonIdContinue __ ImportedBinding ObjectPropertyDelimiter
  __ ImportedBinding ObjectPropertyDelimiter

# https://262.ecma-international.org/#prod-ModuleExportName
ModuleExportName
  StringLiteral
  IdentifierName

# https://262.ecma-international.org/#prod-ModuleSpecifier
ModuleSpecifier
  StringLiteral

# https://262.ecma-international.org/#prod-ImportedBinding
ImportedBinding
  BindingIdentifier

# https://262.ecma-international.org/#prod-ExportDeclaration
ExportDeclaration
  Export __ "default" NonIdContinue __ ( HoistableDeclaration / ClassDeclaration / AssignmentExpression )
  Export __ ExportFromClause __ FromClause
  Export __ ( NamedExports / VariableStatement / Declaration )

As
  "as" NonIdContinue

Export
  "export" NonIdContinue

# https://262.ecma-international.org/#prod-ExportFromClause
ExportFromClause
  "*" ( __ "as" NonIdContinue __ ModuleExportName )?
  NamedExports

# https://262.ecma-international.org/#prod-NamedExports
NamedExports
  "{" ExportSpecifier* (__ "," )? __ "}"

# https://262.ecma-international.org/#prod-ExportSpecifier
ExportSpecifier
  __ ModuleExportName ( __ "as" __ ModuleExportName )? ObjectPropertyDelimiter

# https://262.ecma-international.org/#prod-Declaration
Declaration
  HoistableDeclaration
  ClassDeclaration
  LexicalDeclaration
  TypeDeclaration

# https://262.ecma-international.org/#prod-HoistableDeclaration
HoistableDeclaration
  FunctionDeclaration

# https://262.ecma-international.org/#prod-LexicalDeclaration
LexicalDeclaration
  # NOTE: Eliminated left recursion
  ("let" / "const") __ LexicalBinding ( __ "," __ LexicalBinding )*
  # NOTE: Added const shorthand
  ( BindingPattern / BindingIdentifier ):bind TypeSuffix?:suffix __:ws ":=" AssignmentExpression:exp -> ["const ", bind, suffix, ws, "=", exp]

# https://262.ecma-international.org/#prod-LexicalBinding
LexicalBinding
  BindingPattern TypeSuffix? Initializer
  BindingIdentifier TypeSuffix? Initializer?

# https://262.ecma-international.org/#prod-Initializer
Initializer
  # TODO: Simplify whitespace prefixing (may need to push it down into the literals)
  # Nested blocks will get shadowed if __ is consumed before them because it consumes the indent
  __ "=" AssignmentExpression

# https://262.ecma-international.org/#prod-VariableStatement
VariableStatement
  "var" __ VariableDeclarationList

# https://262.ecma-international.org/#prod-VariableDeclarationList
VariableDeclarationList
  VariableDeclaration ( __ "," __ VariableDeclaration )*

# https://262.ecma-international.org/#prod-VariableDeclaration
VariableDeclaration
  BindingPattern Initializer
  BindingIdentifier Initializer?

# https://262.ecma-international.org/#prod-NumericLiteral
NumericLiteral
  DecimalBigIntegerLiteral
  BinaryIntegerLiteral
  OctalIntegerLiteral
  HexLiteral
  DecimalLiteral

# https://262.ecma-international.org/#prod-DecimalBigIntegerLiteral
DecimalBigIntegerLiteral
  /(?:0|[1-9](?:_[0-9]|[0-9])*)n/
  # /[_0-9]*n/

DecimalLiteral
  /\d+(?:\.\d*)?/

# https://262.ecma-international.org/#prod-BinaryIntegerLiteral
BinaryIntegerLiteral
  /0[bB][01](?:[01]|_[01])*/

# https://262.ecma-international.org/#prod-OctalIntegerLiteral
OctalIntegerLiteral
  /0[oO][0-7](?:[0-7]|_[0-7])*/

# https://262.ecma-international.org/#prod-HexIntegerLiteral
HexLiteral
  /0[xX][0-9a-fA-F](?:[0-9a-fA-F]|_[0-9a-fA-F])*/

# https://262.ecma-international.org/#prod-StringLiteral
StringLiteral
  # TODO: actual CoffeeScript """ string behaviors
  "\"\"\"" $TripleDoubleStringCharacter* "\"\"\"" -> ["`", $2, "`"]
  "\"" $DoubleStringCharacter* "\""
  "\'" $SingleStringCharacter* "\'"

DoubleStringCharacter
  [^"\\]+
  EscapeSequence

SingleStringCharacter
  [^'\\]+
  EscapeSequence

TripleDoubleStringCharacter
  /(?:"(?!"")|\\.|[^"])+/

EscapeSequence
  $( "\\" . )

# https://262.ecma-international.org/#prod-RegularExpressionLiteral
RegularExpressionLiteral
  "/" $RegularExpressionBody "/" RegularExpressionFlags

# https://262.ecma-international.org/#prod-RegularExpressionBody
# NOTE: Simplified a little from the spec, ignoring <PS>, <LS>
RegularExpressionBody
  [^*\/\r\n] RegExpCharacter*

RegExpCharacter
  [^\/\r\n]+
  EscapeSequence

# https://262.ecma-international.org/#prod-RegularExpressionFlags
RegularExpressionFlags
  /(:?\p{ID_Continue}|[\u200C\u200D$])*/

# https://262.ecma-international.org/#prod-TemplateLiteral
# NOTE: Simplified template grammar
TemplateLiteral
  "`" ( TemplateCharacters / TemplateSubstitution )* "`"

# NOTE: Simplified grammar
TemplateSubstitution
  "${" __ Expression __ "}"

# https://262.ecma-international.org/#prod-TemplateCharacter
TemplateCharacters
  /(?:\$(?!\{)|\\.|[^$`])+/

# https://262.ecma-international.org/#sec-comments
ReservedWord
  /(?:and|as|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|if|import|in|instanceof|interface|is|new|null|or|return|super|switch|this|throw|true|try|typeof|unless|var|void|while|with|yield)(?!\p{ID_Continue})/

# https://262.ecma-international.org/#sec-comments
Comment
  MultiLineComment
  SingleLineComment

SingleLineComment
  /\/\/[^\r\n]*/
  CoffeeSingleLineComment

# https://262.ecma-international.org/#prod-MultiLineComment
MultiLineComment
  JSMultiLineComment
  # NOTE: Added CoffeeScript style ### multiline comments
  CoffeeMultiLineComment

JSMultiLineComment
  "/*" $(!"*/" . )* "*/"

CoffeeSingleLineComment
  # NOTE: CoffeeScript style single line comments
  /#([^\r\n]*)/ ->
    // DEFER: # comments when CoffeeScript compat flag is set, may be a little tricky to allow with private ids
    if (!global.coffeeCompat) return $skip
    return ["//", $1]

CoffeeMultiLineComment
  "###" $(!"###" .)* "###" -> ["/*", $2, "*/"]

# InlineComment is a multi-line comment with no line separators
InlineComment
  "/*" $(!"*/" [^\r\n] )* "*/"

RestOfLine
  TrailingComment* EOL

TrailingComment
  ([\t ]+ / InlineComment / SingleLineComment)

# Non-newline "white space" (includes comments)
# TODO: JS counts line terminators that appear in multi-line comments. For example "return /*\n*/5" is different than "return /**/ 5" because of the newline within the comment
_
  ([\t ]+ / Comment)+

# Optional whitespace including newlines and comments
__
  ([\s]+ / Comment)*

StatementDelimiter
  TrailingComment* ";" TrailingComment*
  # Implied semicolon
  &EOS -> [";", $1]

NonIdContinue
  /(?!\p{ID_Continue})/

## JSX

# https://facebook.github.io/jsx/#prod-JSXElement
JSXElement
  JSXSelfClosingElement
  JSXOpeningElement JSXChildren* __ JSXClosingElement ->
    // Check that tags match
    if ($1[1] !== $4[2]) {
      throw new Error(`mismatched closing tags at ${JSON.stringify($loc)}`)
    }
    return $0

# https://facebook.github.io/jsx/#prod-JSXSelfClosingElement
JSXSelfClosingElement
  "<" $JSXElementName JSXAttributes? __ "/>"

# https://facebook.github.io/jsx/#prod-JSXOpeningElement
JSXOpeningElement
  "<" $JSXElementName JSXAttributes? __ ">"

# https://facebook.github.io/jsx/#prod-JSXClosingElement
JSXClosingElement
  "</" __ $JSXElementName __ ">"

# https://facebook.github.io/jsx/#prod-JSXFragment
JSXFragment
  "<>" JSXChildren? "</>"

# https://facebook.github.io/jsx/#prod-JSXElementName
JSXElementName
  # Merged in https://facebook.github.io/jsx/#prod-JSXNamespacedName
  # Merged in https://facebook.github.io/jsx/#prod-JSXMemberExpression
  JSXIdentifierName ( (":" JSXIdentifierName) / ( "." JSXIdentifierName )* )

# NOTE: Like IdentifierName but includes hyphens after start
# NOTE: Combined from recursive https://facebook.github.io/jsx/#prod-JSXIdentifier definition
JSXIdentifierName
  /(?:\p{ID_Start}|[_$])(?:\p{ID_Continue}|[\u200C\u200D$-])*/

# https://facebook.github.io/jsx/#prod-JSXAttributes
JSXAttributes
  ( __ JSXAttribute )*

# NOTE: Merged SpreadAttribute and Attribute
JSXAttribute
  # https://facebook.github.io/jsx/#prod-JSXSpreadAttribute
  "{" __ "..." __ AssignmentExpression __ "}"

  # https://facebook.github.io/jsx/#prod-JSXAttribute
  JSXAttributeName JSXAttributeInitializer?

# https://facebook.github.io/jsx/#prod-JSXAttributeName
JSXAttributeName
  # NOTE: Merged JSXIdentifier and JSXNamespacedName
  JSXIdentifierName ( ":" JSXIdentifierName )?

# https://facebook.github.io/jsx/#prod-JSXAttributeInitializer
JSXAttributeInitializer
  __ "=" __ JSXAttributeValue

# https://facebook.github.io/jsx/#prod-JSXAttributeValue
JSXAttributeValue
  # https://facebook.github.io/jsx/#prod-JSXDoubleStringCharacters
  /"[^"]*"/
  # https://facebook.github.io/jsx/#prod-JSXSingleStringCharacters
  /'[^']*'/
  "{" __ AssignmentExpression __ "}"
  JSXElement
  JSXFragment

# https://facebook.github.io/jsx/#prod-JSXChildren
JSXChildren
  ( __ JSXChild )*

# https://facebook.github.io/jsx/#prod-JSXChild
JSXChild
  JSXText
  JSXElement
  JSXFragment
  "{" JSXChildExpression? __ "}"

# https://facebook.github.io/jsx/#prod-JSXText
JSXText
  # NOTE: not currently excluding https://facebook.github.io/jsx/#prod-HTMLCharacterReference
  [^{}<>]+

# https://facebook.github.io/jsx/#prod-JSXChildExpression
JSXChildExpression
  __ ( "..." __ )? AssignmentExpression

## Type Stuff

TypeDeclaration
  /type(?!\p{ID_Continue})/      TrailingComment* IdentifierName TypeParameters? __ "=" __ Type -> { ts: true, children: $0 }
  /interface(?!\p{ID_Continue})/ TrailingComment* IdentifierName InterfaceBlock -> { ts: true, children: $0 }

InterfaceBlock
  __ "{" EOS NestedInterfaceProperties __ "}"
  __ "{" ( __ InterfaceProperty )* __ "}"
  # NOTE: Added indentation based implied braces
  InsertOpenBrace EOS NestedInterfaceProperties InsertNewline InsertIndent InsertCloseBrace

NestedInterfaceProperties
  PushIndent NestedInterfaceProperty*:props PopIndent ->
    if (props.length) return props
    return $skip

NestedInterfaceProperty
  Nested InterfaceProperty

InterfaceProperty
  ( TypeIndexSignature / PropertyName ) TypeSuffix InterfacePropertyDelimiter

InterfacePropertyDelimiter
  _* ";"
  &( _* "}" ) # NOTE: Don't insert semi-colon before inline closing brace
  &( __ "}" ) -> ";"
  &EOS -> ";"

TypeIndexSignature
  ( [+-]? "readonly" __ )? "[" TypeIndex "]" ( __ [+-] "?" )?

TypeIndex
  __ Identifier TypeSuffix
  __ PropertyName __ "in" Type ( __ "as" Type )?

TypeSuffix
  "?"? __ ":" Type -> { ts: true, children: $0 }

ReturnTypeSuffix
  __ ":" ( __ "asserts" NonIdContinue )? TypePredicate -> { ts: true, children: $0 }

TypePredicate
  Type ( __ "is" NonIdContinue Type )?

Type
  TypeConditional

TypeBinary
  TypeUnary (__ TypeBinaryOp TypeUnary)*

TypeUnary
  ( __ TypeUnaryOp NonIdContinue )* TypePrimary TypeUnarySuffix*

TypeUnarySuffix
  TypeIndexedAccess

TypeUnaryOp
  "keyof"
  "typeof"
  "infer"

TypeIndexedAccess
  __ "[" Type? __ "]"

TypePrimary
  InterfaceBlock
  __ "(" Type __ ")"
  _* FunctionType
  _* IdentifierName ("." IdentifierName)* TypeArguments?
  _* TypeLiteral

TypeConditional
  TypeBinary ( __ "extends" Type ( __ "?" Type __ ":" Type )? )?

TypeLiteral
  Literal
  "void"
  "[]"

TypeBinaryOp
  "|"
  "&"

FunctionType
  Parameters __ "=>" Type

TypeArguments
  __ "<" __ Type (__ "," __ Type)* (__ ",")? __ ">"

TypeParameters
  __ "<" __ Type (__ "," __ Type)* (__ ",")? __ ">"

TypeParameter
  __ Identifier TypeConstraint? TypeParameterDelimiter

TypeConstraint
  __ "extends" Type

TypeParameterDelimiter
  _* ","
   # NOTE: Don't insert comma before inline closing angle bracket
  &( _* ">" )
  # NOTE: Do insert comma before closing angle bracket on following line
  &( __ ">" ) -> ","
  &EOS -> ","

## Utility

Shebang
  /#![^\r\n]*/

DirectivePrologue
  ($[\t ]* $StringLiteral $StatementDelimiter $EOS)* ->
    return $0.map(p => p.join(""))

EOS
  RestOfLine+

# End of line
EOL
  /\r\n|\n|\r|$/

# End of file
EOF
  /$/

Debugger
  "" ->
    debugger

# Insertions

InsertOpenParen
  "" -> "("

InsertCloseParen
  "" -> ")"

InsertOpenBrace
  # NOTE: Includes a preceding space
  "" -> " {"

InsertCloseBrace
  "" -> "}"

InsertNewline
  "" ->
    return "\n"

InsertIndent
  "" ->
    return "".padStart(global.currentIndent * 2)

InsertSpace
  "" -> " "

InsertDot
  "" -> "."

InsertBreak
  "" -> "break;"

# Indentation

Init
  Shebang? DirectivePrologue:directives "" ->
    global.currentIndent = 0
    global.indentLevels = [0]
    global.verbose = false

    if(directives) {
      const compatRe = /use coffee-compat/;
      global.coffeeCompat = directives.some(d => d.match(compatRe))
    }

    return $0

Indent
  ( "  " / "\t" )* ->
    return $1.length

PushIndent
  "" ->
    global.currentIndent++
    if (global.verbose) {
      console.log("pushing indent", global.currentIndent)
    }
    global.indentLevels.push(global.currentIndent)

    return global.currentIndent

PopIndent
  "" ->
    if (global.verbose) {
      console.log("popping indent", global.indentLevels[global.indentLevels.length-1], "->", global.indentLevels[global.indentLevels.length-2])
    }
    global.indentLevels.pop()
    global.currentIndent = global.indentLevels[global.indentLevels.length-1]

    return global.currentIndent

Nested
  EOS?:eos Indent:indent ->
    const currentIndent = global.indentLevels[global.indentLevels.length-1]
    if (global.verbose) {
      console.log("global indent", global.currentIndent)
      console.log("Indented", indent, currentIndent)
    }
    if (indent !== currentIndent) {
      if (global.verbose) {
        console.log("skipped nested")
      }
      return $skip
    }
    return [eos, "".padStart(indent * 2)]

NestedFurther
  EOS?:eos Indent:indent ->
    const currentIndent = global.indentLevels[global.indentLevels.length-1]
    if (global.verbose) {
      console.log("global indent", global.currentIndent)
      console.log("Indented", indent, currentIndent)
    }
    if (indent !== currentIndent + 1) {
      if (global.verbose) {
        console.log("skipped nested")
      }
      return $skip
    }
    return [eos, "".padStart(indent * 2)]
