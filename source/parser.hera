# WIP Coffee-like lang

# Goal: A successor to CoffeeScript, much more 1-to-1 with es6
# https://262.ecma-international.org/13.0/
# Goal: TypeScript support too?

Program
  Init TopLevelStatement*

TopLevelStatement
  EOL? Content StatementDelimiter

Import
  "import"

Export
  "export"

Indent
  "  "*

Content
  Statement
  Expression

Expression
  Applied

# Function application:
# a b
# a(b)
# a b, c, d
# a(b, c, d)
Applied
  Operated Application?

Application
  "()"
  __ "(" ArgumentList ")"
  # Space then argument list
  ApplicationStart ArgumentList InsertCloseParen

# Start of function application, inserts an open parenthesis, maintains spacing and comments when possible
ApplicationStart
  $_+:spacing ->
    return "(" + spacing.replace(/^ /, "")

ArgumentList
  Expression CommaExpression*

CommaExpression
  __ "," __ Expression

Operated
  Assigned (__ BinaryOp __ Assigned)*
  UnaryOp* Assigned

Assigned
  (Accessed __ "=" __)+ Expression
  Accessed

Accessed
  Primary Access*

Access
  "?"? "." Name
  "?"? "[" Expression "]"

Primary
  "(" Expression ")"
  Function
  Literal
  Name

This
  "this"
  "@"

Function
  Parameters "->"

Literal
  StringValue
  Numeric
  "true"
  "false"
  "null"
  "undefined"

Parameters
  "(" Name (Comma Name)+ ")"
  "(" Name ")"
  ""

Comma
  _* "," _*

Name
  [$a-zA-Z_][$a-zA-Z0-9_]*

BinaryOp
  "+"
  "-"
  "*"
  "/"
  "and" -> "&&"
  "&&"
  "or" -> "||"
  "||"

# TODO: delete, void, typeof
UnaryOp
  [!~+-]

Statement
  Import
  Export

# TODO: Actual import grammar
Import
  /import[^\r\n]*/

# TODO: Actual export grammar
Export
  /export[^\r\n]*/

Numeric
  BigIntegerLiteral
  HexLiteral
  DecimalLiteral

BigIntegerLiteral
  /(?:0|[1-9](?:_[0-9]|[0-9])*)n/
  # /[_0-9]*n/

DecimalLiteral
  /\d+(?:\.\d*)?/

# https://262.ecma-international.org/13.0/#prod-HexIntegerLiteral
HexLiteral
  /0[xX][0-9a-fA-F](?:[0-9a-fA-F]|_[0-9a-fA-F])*/

StringValue
  "\"" $DoubleStringCharacter* "\""
  "\'" $SingleStringCharacter* "\'"

DoubleStringCharacter
  [^"\\]+
  EscapeSequence

SingleStringCharacter
  [^'\\]+
  EscapeSequence

EscapeSequence
  $( "\\" . )

# https://262.ecma-international.org/13.0/#sec-comments
ReservedWord
  /await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|if|import|in|instanceof|new|null|return|super|switch|this|throw|true|try|typeof|var|void|while|with|yield/

# https://262.ecma-international.org/13.0/#sec-comments
Comment
  MultiLineComment
  SingleLineComment

SingleLineComment
  /\/\/[^\r\n]*/

MultiLineComment
  "/*" (!"*/" . )* "*/"

# Non-newline "white space" (includes comments)
_
  ([\t ] / Comment)

# Optional whitespace including newlines
__
  /\s*/

StatementDelimiter
  _* ";"
  # Implied semicolon
  _* &EOL -> [";", $1]

# End of line
EOL
  /\r\n|\n|\r|$/

# End of file
EOF
  /$/

#

Init
  ""

InsertOpenParen
  "" -> "("

InsertCloseParen
  "" -> ")"
