/*
 * Experimenting with using the CoffeeScript AST to generate civet.
 */

interface FileNode
  type: "File"
  program: ProgramNode

interface ProgramNode
  type: "Program"
  body: Array<StatementNode>

interface ClassDeclaration
  type: "ClassDeclaration"

interface AssignmentExpression
  type: "AssignmentExpression"
  operator: string
  left: Identifier
  right: Expression

interface BinaryExpression
  type: "BinaryExpression"
  operator: string
  left: Expression
  right: Expression

interface CallExpression
  type: "CallExpression"
  callee: Expression
  arguments: Array<Expression>

interface FunctionExpression
  type: "FunctionExpression"
  id: string | undefined
  params: Identifier[]
  body: BlockStatement
  hasIndentedBody: boolean

interface LogicalExpression
  type: "LogicalExpression"
  operator: string
  left: Expression
  right: Expression

interface MemberExpression
  type: "MemberExpression"
  object: Expression
  property: Expression
  computed: boolean

interface NewExpression
  type: "NewExpression"
  callee: Expression
  arguments: Array<Expression>

interface UnaryExpression
  type: "UnaryExpression"
  operator: string
  argument: Expression

// Statements

interface BlockStatement
  type: "BlockStatement"
  body: Array<StatementNode>

interface ExpressionStatement
  type: "ExpressionStatement"
  expression: Expression

interface IfStatement
  type: "IfStatement"
  test: Expression
  consequent: StatementNode
  alternate: StatementNode | null
  postfix: boolean
  inverted: boolean

interface ReturnStatement
  type: "ReturnStatement"
  argument: Expression

interface ThrowStatement
  type: "ThrowStatement"
  argument: Expression

interface Identifier
  type: "Identifier"
  name: string
  declaration: boolean

interface NullLiteral
  type: "NullLiteral"
  value: string

interface StringLiteral
  type: "StringLiteral"
  value: string
  extra: { raw: string }

type ASTNode = FileNode | ProgramNode | StatementNode | Identifier
type StatementNode = ClassDeclaration | Statement | Expression
type Statement = BlockStatement | ExpressionStatement | IfStatement | ReturnStatement | ThrowStatement
type Expression = AssignmentExpression | BinaryExpression | CallExpression | FunctionExpression | LogicalExpression | MemberExpression | NewExpression | UnaryExpression | Literal
type Literal = NullLiteral | StringLiteral

export function convert(node: ASTNode): string
  switch node.type
    case "File"
      return convert(node.program)
    case "Program"
      return node.body.map(convert).join("\n")

    // Statements
    case "BlockStatement"
      return node.body.map(convert).join("\n")
    case "ExpressionStatement"
      return convert(node.expression)
    case "IfStatement"
      if node.inverted
        return `unless ${convert(node.test)} ${convert(node.consequent)}`
      else
        return `if ${convert(node.test)} ${convert(node.consequent)}`
    case "ReturnStatement"
      return `return ${convert(node.argument)}`
    case "ThrowStatement"
      return `throw ${convert(node.argument)}`

    // Expressions
    case "AssignmentExpression"
      return `${convert(node.left)} ${node.operator} ${convert(node.right)}`
    case "BinaryExpression"
      return `${convert(node.left)} ${node.operator} ${convert(node.right)}`
    case "CallExpression"
      return `${convert(node.callee)}(${node.arguments.map(convert).join(", ")})`
    case "LogicalExpression"
      return `${convert(node.left)} ${node.operator} ${convert(node.right)}`
    case "MemberExpression"
      return `${convert(node.object)}.${convert(node.property)}`
    case "NewExpression"
      return `new ${convert(node.callee)}(${node.arguments.map(convert).join(", ")})`
    case "FunctionExpression"
      return `${node.id or ""}(${node.params.map(convert).join(", ")}) ->
        ${convert(node.body)}
      `
    case "UnaryExpression"
      return `${node.operator}${convert(node.argument)}`

    case "Identifier"
      if node.declaration
        return `var ${node.name}`
      else
        return node.name

    case "NullLiteral"
      return "null"
    case "StringLiteral"
      return node.value

    default
      console.log("UNKNOWN NODE")
      console.dir(node, { depth: 2 })
      throw new Error `Unknown node type: ${node.type}`
