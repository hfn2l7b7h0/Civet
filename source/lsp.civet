// Experimenting with transpiling to TS

import ts from "typescript"

import type {
  CompilerOptions
  LanguageServiceHost
} from "typescript"

import path from "path"

const {
  createLanguageService
  createSourceFile
  resolveModuleName
  sys
  ModuleKind
  ModuleResolutionKind
  ScriptKind
  ScriptSnapshot
  ScriptTarget
} = ts

const DefaultCompilerOptions : CompilerOptions =
  allowNonTsExtensions: true
  allowJs: true
  target: ScriptTarget.Latest
  moduleResolution: ModuleResolutionKind.NodeJs
  module: ModuleKind.CommonJS
  allowSyntheticDefaultImports: true
  experimentalDecorators: true

const fileCache : Record<string, string> = {
  "source/hello.ts": "const x : string = 'hi'; console.log(x)"
}

const createCompilerHost = (options: CompilerOptions, moduleSearchLocations : string[]) : LanguageServiceHost ->
  const fileExists = (fileName: string) : boolean ->
    return fileCache[fileName]?

  const readFile = (fileName: string) ->
    return fileCache[fileName]

  const getSourceFile = (fileName: string, languageVersion: ScriptTarget, onError: (message: string) => void ) ->
    const sourceText = sys.readFile fileName

    if sourceText != undefined
      return createSourceFile fileName, sourceText, languageVersion
    return

  const resolveModuleNames = (moduleNames: string[], containingFile: string) ->
    const resolvedModules = []

    for const moduleName of moduleNames
      // try to use standard resolution
      const result = resolveModuleName moduleName, containingFile, options, {
        fileExists,
        readFile
      }

      if result.resolvedModule
        resolvedModules.push(result.resolvedModule);
      else
        // check fallback locations, for simplicity assume that module at location
        // should be represented by '.d.ts' file
        for const location of moduleSearchLocations
          const modulePath = path.join(location, moduleName + ".d.ts")
          if fileExists(modulePath)
            resolvedModules.push({ resolvedFileName: modulePath })

    return resolvedModules

  return {
    getCompilationSettings: ->
      return options
    getDefaultLibFileName: ->
      return "lib.d.ts"
    writeFile: (fileName: string, content: string) ->
      fileCache[fileName] = content
    getCurrentDirectory: ->
      return sys.getCurrentDirectory()
    getDirectories: (path) ->
      return sys.getDirectories(path)
    getNewLine: ->
      return sys.newLine
    getScriptFileNames: ->
      return Object.keys(fileCache)
    getScriptKind: (fileName: string) ->
      return ScriptKind.TS
    getScriptSnapshot: (fileName) ->
      const content = fileCache[fileName]
      if content?
        return ScriptSnapshot.fromString(content)
      return undefined
    getScriptVersion: (fileName: string) ->
      return "0"
    useCaseSensitiveFileNames: ->
      return sys.useCaseSensitiveFileNames
    fileExists
    readFile
    resolveModuleNames
  }

const host = createCompilerHost(DefaultCompilerOptions, [])
const service = createLanguageService(host)

const program = service.getProgram()

console.log program.getRootFileNames(), program.getIdentifierCount()
console.log service.getCompletionsAtPosition("source/hello.ts", 16)
// console.log program.getCompletionsAtPosition()
