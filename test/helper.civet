Hera from ../source/parser.hera
{parse} := Hera

gen from ../source/generate.coffee
assert from assert

{ writeFileSync } from fs

{prune} := gen

verbose := false
displayAST := false

compare := (src: string, result: string, filename: string) ->
  let events

  stack := []
  logs := []

  if verbose
    events =
      enter: (ruleName) ->
        arrow := String.fromCharCode(0x27A1)
        logs.push "".padStart(stack.length * 2, " ") + arrow + "   " + ruleName
        stack.push ruleName
      exit: (ruleName, result) ->
        // emoji check mark or cross mark based on result
        mark := result ? "✅" : "❌"
        leftArrow := String.fromCharCode(0x2B05)
        stack.pop()
        logs.push "".padStart(stack.length * 2, " ") + leftArrow + " " + mark + ruleName

  ast := prune parse(src, {filename, events})
  if verbose
    writeFileSync "parse.log", logs.join("\n")
  if displayAST
    console.dir ast, {depth: null}

  assert.equal gen(ast, {}), result

testCase := (text: string) ->
  [desc, src, result] := text.split("\n---\n")

  it desc, ->
    compare src, result, desc

throws := (text: string) ->
  assert.throws ->
    gen(parse(text))

export {
  compare
  testCase
  throws
}
