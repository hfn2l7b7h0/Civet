{testCase} from ../helper.civet

describe "example code", ->
  testCase """
    lexer.coffee:166
    ---
    "civet coffeeCompat"
    if id is 'do' and regExSuper = /^(\\s*super)(?!\\(\\))/.exec @chunk[3...]
      @token 'SUPER', 'super'
    ---
    var regExSuper
    if (id === 'do' && (regExSuper = /^(\\s*super)(?!\\(\\))/.exec(this.chunk.slice(3)))) {
      this.token('SUPER', 'super')
    }
  """

  testCase """
    grammar.coffee
    ---
      Identifier: [
        o 'IDENTIFIER',                             -> new IdentifierLiteral $1
        o 'JSX_TAG',                                -> new JSXTag $1.toString(),
                                                        tagNameLocationData:                  $1.tagNameToken[2]
                                                        closingTagOpeningBracketLocationData: $1.closingTagOpeningBracketToken?[2]
                                                        closingTagSlashLocationData:          $1.closingTagSlashToken?[2]
                                                        closingTagNameLocationData:           $1.closingTagNameToken?[2]
                                                        closingTagClosingBracketLocationData: $1.closingTagClosingBracketToken?[2]
      ]
    ---
      {Identifier: [
        o('IDENTIFIER',                             function() { return new IdentifierLiteral($1) }),
        o('JSX_TAG',                                function() { return new JSXTag($1.toString(), {
                                                        tagNameLocationData:                  $1.tagNameToken[2],
                                                        closingTagOpeningBracketLocationData: $1.closingTagOpeningBracketToken?.[2],
                                                        closingTagSlashLocationData:          $1.closingTagSlashToken?.[2],
                                                        closingTagNameLocationData:           $1.closingTagNameToken?.[2],
                                                        closingTagClosingBracketLocationData: $1.closingTagClosingBracketToken?.[2],
        }) })
      ]}
  """

  describe.skip "TODO", ->
    testCase """
      lexer.coffee for expressions inside function arguments
      ---
      commentTokens = flatten(
        for commentOpts in comments
          @commentToken commentOpts.comment, Object.assign commentOpts, heregex: yes, returnCommentTokens: yes
      )
      ---
    """
