{testCase} from ./helper.civet

describe "class", ->
  testCase """
    basic
    ---
    class X {}
    ---
    class X {};
  """

  testCase """
    member function
    ---
    class X {
      f() {
        return "hi";
      };
    };
    ---
    class X {
      f() {
        return "hi";
      };
    };
  """

  testCase """
    indented member function
    ---
    class X
      f()
        return "hi"
    ---
    class X {
      f() {
        return "hi";
      };
    };
  """

  testCase """
    private field
    ---
    class X {
      #p1 = 3
      #privateField
    }
    ---
    class X {
      #p1 = 3;
      #privateField;
    };
  """

  testCase """
    function field
    ---
    class X
      f: MyFuncType = -> return "hi"
    ---
    class X {
      f: MyFuncType = function() { return "hi" };
    };
  """

  testCase """
    get private method
    ---
    class X {
      get #x ()
        return "yo"
    }
    ---
    class X {
      get #x () {
        return "yo";
      };
    };
  """

  testCase """
    set private method
    ---
    class X {
      set #x (v)
        return
    }
    ---
    class X {
      set #x (v) {
        return;
      };
    };
  """

  testCase """
    set private method with inline comments
    ---
    class X {
      set /**/ #x (v)
        return
    }
    ---
    class X {
      set /**/ #x (v) {
        return;
      };
    };
  """

  testCase """
    static method shorthand
    ---
    class A
      @y()
        return 3
    ---
    class A {
      static y() {
        return 3;
      };
    };
  """

  testCase """
    static get method shorthand
    ---
    class A
      @get y()
        return 3
    ---
    class A {
      static get y() {
        return 3;
      };
    };
  """

  testCase """
    static block
    ---
    class X {
      static
        x = 1
    }
    ---
    class X {
      static {
        x = 1;
      };
    };
  """

  testCase """
    static block shorthand
    ---
    class X
      @
        x = 1
    ---
    class X {
      static  {
        x = 1;
      };
    };
  """

  testCase """
    static block with explicit braces
    ---
    class X
      @{
        x = 1
      }
    ---
    class X {
      static {
        x = 1;
      };
    };
  """

  testCase """
    extends shorthand
    ---
    class A < B
      static
        x = 3
    ---
    class A extends B {
      static {
        x = 3;
      };
    };
  """

  testCase """
    extends with braces
    ---
    class A extends B {
      static
        x = 3
    }
    ---
    class A extends B {
      static {
        x = 3;
      };
    };
  """

  testCase """
    static field
    ---
    class A
      static x = 3
    ---
    class A {
      static x = 3;
    };
  """

  testCase """
    static field shorthand
    ---
    class A
      @x = 3
    ---
    class A {
      static x = 3;
    };
  """

  testCase """
    static field named static
    ---
    class A
      static static = 3
    ---
    class A {
      static static = 3;
    };
  """

  testCase """
    field with name that starts with static
    ---
    class A
      staticField = 3
    ---
    class A {
      staticField = 3;
    };
  """

  testCase """
    static field with name that starts with static
    ---
    class A
      static staticField = 3
    ---
    class A {
      static staticField = 3;
    };
  """

  testCase """
    constuctor '@' shortand
    ---
    class A
      @()
        @x = 3
    ---
    class A {
      constructor() {
        this.x = 3;
      };
    };
  """
