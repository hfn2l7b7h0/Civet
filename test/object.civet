{testCase, throws} from ./helper.civet

describe "object", ->
  testCase """
    empty literal
    ---
    {}
    ---
    {}
  """

  testCase """
    basic
    ---
    a = {x: 1, y: 2}
    ---
    a = {x: 1, y: 2}
  """

  testCase """
    keys are not reserved
    ---
    a =
      if: "cool"
      case: 1
    ---
    a = {
      if: "cool",
      case: 1,
    }
  """

  testCase """
    spread
    ---
    y = {...x}
    ---
    y = {...x}
  """

  testCase """
    single line literal
    ---
    a: b
    ---
    {a: b}
  """

  // TODO: maybe this should actually be one object?
  testCase """
    multiple unnested literals
    ---
    a: b
    b: c
    ---
    {a: b}
    {b: c}
  """

  testCase """
    keeps comments
    ---
    { /**/ x}
    ---
    { /**/ x}
  """

  testCase """
    spread
    ---
    { ...x }
    ---
    { ...x }
  """

  // describe.only "", ->
  testCase """
    optional commas
    ---
    x = {
      a
      b,
      c
    }
    ---
    x = {
      a,
      b,
      c
    }
  """

  it "doesn't allow bare assignments inside", ->
    throws """
      {x=y}
    """

    throws """
      {x+=y}
    """

    throws """
      {x-=y}
    """

    throws """
      {x<=y}
    """

  testCase """
    allows for extra newlines and whitespace with braces
    ---
    x = {
      a:
              4
    }
    ---
    x = {
      a:
              4
    }
  """

  testCase """
    nested object syntax
    ---
    x =
      a: 1
      b: 2
      c:
        d: "a"
        e: "b"
    ---
    x = {
      a: 1,
      b: 2,
      c: {
        d: "a",
        e: "b",
      },
    }
  """

  testCase """
    expression values
    ---
    x =
      a: getA()
      b: getB()
    ---
    x = {
      a: getA(),
      b: getB(),
    }
  """

  testCase """
    method definition
    ---
    x = {
      id()
        return 5
    }
    ---
    x = {
      id() {
        return 5
      }
    }
  """

  testCase """
    method get definition
    ---
    x = {
      get id()
        return 5
    }
    ---
    x = {
      get id() {
        return 5
      }
    }
  """

  testCase """
    method set definition
    ---
    x = {
      set id(v)
        @id = v
    }
    ---
    x = {
      set id(v) {
        this.id = v
      }
    }
  """

  testCase """
    private method definition
    ---
    x = {
      get #id()
        return 5
    }
    ---
    x = {
      get #id() {
        return 5
      }
    }
  """

  testCase """
    async method definition
    ---
    x = {
      async x()
        return 5
    }
    ---
    x = {
      async x() {
        return 5
      }
    }
  """

  testCase """
    generator method definition
    ---
    x = {
      *x()
        return 5
    }
    ---
    x = {
      *x() {
        return 5
      }
    }
  """

  testCase """
    async generator method definition
    ---
    x = {
      async * x()
        return 5
    }
    ---
    x = {
      async * x() {
        return 5
      }
    }
  """

  testCase """
    shorthand key value notation
    ---
    return {
      x: ->
        y
      options
      z: ->
        "y"
    }
    ---
    return {
      x: function() {
        return y
      },
      options,
      z: function() {
        return "y"
      }
    }
  """

  testCase """
    identifiers that start with get/set
    ---
    return {
      getx: -> x
      sety: (y) -> @y = y
    }
    ---
    return {
      getx: function() { return x },
      sety: function(y) { return this.y = y }
    }
  """

  testCase """
    multiline with optional commas
    ---
    {count, starts, compact, repeat, invertLiterate, merge,
    attachCommentsToNode, locationDataToString, throwSyntaxError
    replaceUnicodeCodePointEscapes, flatten, parseNumber} = require './helpers'
    ---
    ({count, starts, compact, repeat, invertLiterate, merge,
    attachCommentsToNode, locationDataToString, throwSyntaxError,
    replaceUnicodeCodePointEscapes, flatten, parseNumber} = require('./helpers'))
  """

  testCase """
    shorthand this property
    ---
    {@tokens, index: i}
    ---
    {tokens: this.tokens, index: i}
  """

  // TODO: Should this be wrapped in parens?
  testCase """
    braceless inline object
    ---
    a: 1
    ---
    {a: 1}
  """
