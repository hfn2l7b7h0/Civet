{testCase} from ./helper.civet

describe "coffee compat", ->
  testCase """
    ==
    ---
    "civet coffee-compat"
    a == b
    ---
    a === b
  """

  testCase """
    !=
    ---
    "civet coffee-compat"
    a != b
    ---
    a !== b
  """

  testCase """
    isnt
    ---
    "civet coffee-compat"
    a isnt b
    ---
    a !== b
  """

  testCase """
    first line comment
    ---
    "civet coffee-compat"
    # first line comment
    ---
    // first line comment
  """

  testCase """
    shebang with directive
    ---
    #! /usr/bin/env coffee
    "civet coffee-compat"
    # comment
    ---
    #! /usr/bin/env coffee
    // comment
  """

  describe "not", ->
    testCase """
      not
      ---
      "civet coffee-compat"
      not a
      ---
      !a
    """

    testCase """
      coffeeNot
      ---
      "civet coffeeNot"
      not a
      ---
      !a
    """

    testCase """
      non-compat
      ---
      not a
      ---
      not(a)
    """

  describe "auto-var", ->
    testCase """
      multiple assignment
      ---
      "civet auto-var"
      a = b = c = d
      a = 2
      ---
      var a, b, c
      a = b = c = d
      a = 2
    """

    testCase """
      assignment to variable indexed array
      ---
      "civet auto-var"
      a[x] = 1
      ---
      a[x] = 1
    """

    testCase """
      with a declaration
      ---
      "civet auto-var"
      let b = 2
      a = 1
      b = a
      ---
      var a
      let b = 2
      a = 1
      b = a
    """

    testCase """
      with a binding pattern
      ---
      "civet auto-var"
      let [a, b] = [1, 2]
      a = 3
      ---
      let [a, b] = [1, 2]
      a = 3
    """

    testCase """
      with import named binding
      ---
      "civet auto-var"
      import {a, b} from 'c'
      a = 1
      ---
      import {a, b} from 'c'
      a = 1
    """

    testCase """
      with default import
      ---
      "civet auto-var"
      import a from 'b'
      a = 1
      ---
      import a from 'b'
      a = 1
    """

    testCase """
      with default and named import
      ---
      "civet auto-var"
      import a, {b, c} from 'd'
      a = 1
      b = 2
      ---
      import a, {b, c} from 'd'
      a = 1
      b = 2
    """

    // TODO: need to figure out non-dec destructuring assignment
    describe.skip "", ->
      testCase """
        with a destructuring assignment
        ---
        "civet auto-var"
        [a, b] = [1, 2]
        ---
        var a, b
        [a, b] = [1, 2]
      """

    testCase """
      nested function
      ---
      "civet auto-var"
      x = 1
      a = ->
        x = 2
        y = 1
        b = ->
          x = 3
          y = 2
          z = 1
      ---
      var x, a
      x = 1
      a = function() {
        var y, b
        x = 2
        y = 1
        return b = function() {
          var z
          x = 3
          y = 2
          return z = 1
        }
      }
    """
