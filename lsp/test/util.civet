// TODO: figure out the magic ts-note/TypeScript config to make this work without destructuring from default import
import util from "../source/lib/util"
const { intersectRanges, containsRange, makeRange, convertNavTree } = util
import assert from "assert"
import type { ScriptElementKind } from "typescript";
import type { DocumentSymbol } from "vscode-languageserver"

describe "util", ->
  it "should intersect ranges", ->
    const range1 = makeRange(0, 0, 0, 10)
    const range2 = makeRange(0, 5, 0, 8)
    assert(intersectRanges(range1, range2))

  it "should check containsRange", ->
    assert containsRange

  it "should convert nav trees", ->
    const items: DocumentSymbol[] = []

    convertNavTree("yolo.ts", items, {
      text: '"util.civet"',
      kind: 'module' as ScriptElementKind,
      kindModifiers: '',
      spans: [{ start: 0, length: 210 }],
      nameSpan: undefined,
      childItems: [
        {
          text: 'containsRange',
          kind: 'alias' as ScriptElementKind,
          kindModifiers: '',
          spans: [{ start: 25, length: 13 }],
          nameSpan: { start: 25, length: 13 },
        },
        {
          text: 'describe("util") callback',
          kind: 'function' as ScriptElementKind,
          kindModifiers: '',
          spans: [{ start: 88, length: 119 }],
          nameSpan: undefined,
          childItems: [
            {
              text: 'it("should compare ranges") callback',
              kind: 'function' as ScriptElementKind,
              kindModifiers: '',
              spans: [{ start: 131, length: 72 }],
              nameSpan: undefined,
            }
          ]
        },
        {
          text: 'intersectRanges',
          kind: 'alias' as ScriptElementKind,
          kindModifiers: '',
          spans: [{ start: 8, length: 15 }],
          nameSpan: { start: 8, length: 15 },
        }
      ]
    })

    console.dir(items, { depth: 8 })

    assert.equal(items.length, 4)
