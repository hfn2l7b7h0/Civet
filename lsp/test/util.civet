// TODO: figure out the magic ts-note/TypeScript config to make this work without destructuring from default import
{ intersectRanges, containsRange, makeRange, remapPosition, forwardMap, convertCoffeeScriptSourceMap } from ../source/lib/util.mjs
assert from assert
Civet from @danielx/civet
{compile as coffeeCompile} from coffeescript

describe "util", ->
  it "should intersect ranges", ->
    range1 := makeRange(0, 0, 0, 10)
    range2 := makeRange(0, 5, 0, 8)
    assert(intersectRanges(range1, range2))

  it "should check containsRange", ->
    assert containsRange

  it "should remap source positions", ->
    src := """
      x := a + 3
      y++

      y = x + a
    """

    {sourceMap} := Civet.compile(src, {
      filename: "test.civet",
      sourceMap: true
    })

    linesMap := sourceMap.data.lines
    // console.log code, linesMap

    assert.deepEqual remapPosition(linesMap,
      line: 0
      character: 7
    ), { line: 0, character: 1}
    assert.deepEqual remapPosition(linesMap,
      line: 1
      character: 1
    ), { line: 1, character: 1}

  it "should forward map", ->
    src := '''
      // TODO: figure out the magic ts-note/TypeScript config to make this work without destructuring from default import
      import util from "../source/lib/util"
      import assert from "assert"
      import type { ScriptElementKind } from "typescript";
      import type { DocumentSymbol } from "vscode-languageserver"
      import Civet from "@danielx/civet"

      { intersectRanges, containsRange, makeRange, convertNavTree, remapPosition, forwardMap } := util

      describe "util", ->
        it "should intersect ranges", ->
          range1 := makeRange(0, 0, 0, 10)
          range2 := makeRange(0, 5, 0, 8)
          assert(intersectRanges(range1, range2))

        it "should check containsRange", ->
          assert containsRange

        it "should remap source positions", ->
          src := """
            x := a + 3
            y++

            y = x + a
          """

          {code, sourceMap} := Civet.compile(src, {
            filename: "test.civet",
            sourceMap: true
          })
    '''

    {sourceMap} := Civet.compile(src, {
      filename: "test.civet",
      sourceMap: true
    })

    [0, 1, 2, 3, 4, 5, 6, 7].forEach (i) ->
      forwardMap(sourceMap.data.lines, {line: 20 + i, character: 5})

  it "should convert CoffeeScript source maps", ->
    src := """
      {parse} = require "./parser"
      {prune} = gen = require "./generate"
      {SourceMap} = util = require "./util"

      defaultOptions = {}

      module.exports =
        parse: parse
        compile: (src, options=defaultOptions) ->
          ast = prune parse(src, {
            filename: options.filename
          })

          if options.sourceMap
            sm = SourceMap(src)
            options.updateSourceMap = sm.updateSourceMap
            code = gen ast, options
            return {
              code,
              sourceMap: sm
            }

          gen ast, options
        generate: gen
        util: util
    """

    {js, sourceMap} := coffeeCompile src,
      bare: true
      filename: "test.coffee"
      header: false
      sourceMap: true

    convertedMap := convertCoffeeScriptSourceMap(sourceMap)
    {sourceMap: sm2} := Civet.compile "x",
      sourceMap: true

    // Hack to generate a source map json for testing
    sm2.data.lines = convertedMap
    srcMapJSON := sm2.json("yo.coffee", "yo.js")
    //@ts-ignore
    srcMapJSON.sourcesContent = [src]

    // console.log src, code

    // console.dir sm.data,
    //   depth: 8

    base64Encode := (src) ->
      return Buffer.from(src).toString('base64')

    // Use this to log the code + sourcemap which can be pasted into https://evanw.github.io/source-map-visualization/ see how it works
    console.log `${js}\n//# sourceMappingURL=data:application/json;base64,${base64Encode JSON.stringify(srcMapJSON)}`
